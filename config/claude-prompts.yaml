# Claude Automation System - Claudeプロンプトテンプレート
# Claude実行時に使用するプロンプトのテンプレート

# 基本プロンプトテンプレート
base_prompts:
  # Issue解析用プロンプト
  analyze_issue: |
    以下のGitHub Issueを分析し、実装すべき内容を理解してください。
    
    リポジトリ: {repository}
    Issue番号: #{issue_number}
    タイトル: {issue_title}
    
    Issue本文:
    {issue_body}
    
    ラベル: {labels}
    
    このIssueから以下を判断してください：
    1. 実装すべき機能の概要
    2. 技術的な要件
    3. 受け入れ条件
    4. 実装の優先順位
  
  # 実装指示プロンプト
  implement_feature: |
    以下の要件に基づいて実装を行ってください。
    
    ## 実装要件
    {requirements}
    
    ## プロジェクト情報
    - リポジトリ: {repository}
    - ブランチ戦略: {branch_strategy}
    - ベースブランチ: {base_branch}
    - 作業ブランチ: {working_branch}
    
    ## コーディング規約
    {coding_standards}
    
    ## 実装時の注意事項
    - 既存のコードスタイルに従ってください
    - 適切なエラーハンドリングを実装してください
    - 必要に応じてテストを作成してください
    - コードには適切なコメントを追加してください
  
  # バグ修正用プロンプト
  fix_bug: |
    以下のバグを修正してください。
    
    ## バグ情報
    Issue番号: #{issue_number}
    説明: {bug_description}
    
    ## 再現手順
    {reproduction_steps}
    
    ## 期待される動作
    {expected_behavior}
    
    ## 実際の動作
    {actual_behavior}
    
    ## 修正方針
    1. 問題の原因を特定してください
    2. 最小限の変更で修正してください
    3. 回帰テストを考慮してください
    4. 修正内容を明確に説明してください

# タスクタイプ別プロンプト
task_prompts:
  # 新機能実装
  feature:
    pre_analysis: |
      新機能の実装を開始します。
      まず、プロジェクトの構造と既存のコードを分析し、
      新機能をどのように統合するか計画を立ててください。
    
    implementation: |
      以下の計画に基づいて新機能を実装してください：
      {implementation_plan}
      
      実装時は以下を考慮してください：
      - モジュール性と再利用性
      - パフォーマンスへの影響
      - 既存機能との互換性
      - セキュリティ面での考慮事項
    
    post_implementation: |
      実装が完了しました。
      以下を確認してください：
      - コードの品質
      - テストカバレッジ
      - ドキュメントの更新
      - パフォーマンスへの影響
  
  # バグ修正
  bugfix:
    pre_analysis: |
      バグ修正を開始します。
      まず、バグの根本原因を特定し、
      影響範囲を把握してください。
    
    implementation: |
      以下の分析結果に基づいてバグを修正してください：
      {bug_analysis}
      
      修正時は以下を考慮してください：
      - 最小限の変更での修正
      - 副作用の防止
      - 回帰テストの必要性
      - エッジケースの考慮
    
    verification: |
      修正が完了しました。
      以下を確認してください：
      - バグが解消されていること
      - 新たなバグが発生していないこと
      - テストが全て通ること
      - パフォーマンスが劣化していないこと
  
  # ホットフィックス
  hotfix:
    urgent_fix: |
      緊急のホットフィックスが必要です。
      
      ## 問題
      {critical_issue}
      
      ## 影響
      {impact}
      
      以下の手順で対応してください：
      1. 問題を即座に解消する最小限の修正
      2. 一時的な回避策の実装（必要な場合）
      3. 本格的な修正の計画立案
      
      時間が重要です。まず問題を止めることを優先してください。

# コンテキスト拡張プロンプト
context_prompts:
  # プロジェクト構造理解
  understand_structure: |
    プロジェクトの構造を分析してください：
    
    ## ディレクトリ構造
    {directory_tree}
    
    ## 主要ファイル
    {main_files}
    
    ## 依存関係
    {dependencies}
    
    この情報から以下を理解してください：
    - アーキテクチャパターン
    - コーディング規約
    - モジュール間の関係
    - テスト構造
  
  # コーディング規約学習
  learn_conventions: |
    既存のコードから以下の規約を学習してください：
    
    ## サンプルコード
    {code_samples}
    
    分析すべき項目：
    - 命名規則（変数、関数、クラス）
    - インデントスタイル
    - コメントスタイル
    - エラーハンドリングパターン
    - テストの書き方
  
  # 依存関係分析
  analyze_dependencies: |
    プロジェクトの依存関係を分析してください：
    
    ## パッケージ情報
    {package_info}
    
    ## 使用されているライブラリ
    {used_libraries}
    
    確認事項：
    - 利用可能なライブラリ
    - バージョン制約
    - 非推奨の依存関係
    - セキュリティ上の懸念

# レビュー・品質保証プロンプト
review_prompts:
  # コードレビュー
  code_review: |
    実装したコードをレビューしてください：
    
    ## 変更内容
    {changes}
    
    ## レビュー観点
    - コードの品質と可読性
    - パフォーマンスへの影響
    - セキュリティ上の懸念
    - テストカバレッジ
    - ドキュメントの必要性
    
    問題があれば修正してください。
  
  # テスト作成
  create_tests: |
    実装した機能に対するテストを作成してください：
    
    ## 実装内容
    {implementation}
    
    ## テスト要件
    - ユニットテスト
    - 統合テスト（必要な場合）
    - エッジケースのテスト
    - エラーケースのテスト
    
    ## テストフレームワーク
    {test_framework}
  
  # ドキュメント生成
  generate_docs: |
    実装内容のドキュメントを作成してください：
    
    ## 実装概要
    {implementation_summary}
    
    ## ドキュメント要件
    - 機能の説明
    - 使用方法
    - APIリファレンス（該当する場合）
    - 設定オプション
    - サンプルコード

# PR作成プロンプト
pr_prompts:
  # PR説明文
  pr_description: |
    ## 概要
    {summary}
    
    ## 変更内容
    {changes}
    
    ## 関連Issue
    - Closes #{issue_number}
    
    ## テスト
    {test_description}
    
    ## チェックリスト
    - [ ] コードがプロジェクトのスタイルガイドに従っている
    - [ ] セルフレビューを実施した
    - [ ] コードにコメントを追加した（特に複雑な部分）
    - [ ] ドキュメントを更新した
    - [ ] 変更によって既存機能が壊れていない
    - [ ] 新規および既存のテストが通る
    - [ ] 依存関係の変更がある場合は記載した
  
  # コミットメッセージ
  commit_message: |
    {type}({scope}): {subject}
    
    {body}
    
    Issue: #{issue_number}
    Co-authored-by: Claude <claude@anthropic.com>

# エラーハンドリングプロンプト
error_prompts:
  # エラー分析
  analyze_error: |
    以下のエラーを分析し、解決策を提案してください：
    
    ## エラー情報
    {error_message}
    
    ## スタックトレース
    {stack_trace}
    
    ## コンテキスト
    {context}
    
    分析すべき項目：
    1. エラーの根本原因
    2. 影響範囲
    3. 解決策の提案
    4. 再発防止策
  
  # CI/CD失敗対応
  fix_ci_failure: |
    CI/CDパイプラインが失敗しました。
    
    ## 失敗情報
    {failure_info}
    
    ## ログ
    {logs}
    
    以下を確認して修正してください：
    1. テストの失敗原因
    2. ビルドエラー
    3. 環境依存の問題
    4. 設定ミス